# This is a basic workflow that is manually triggered

name: Auto PR Title Edit

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
    
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  update_pr_title:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Update PR Title
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          const fetch = require('node-fetch');
          const core = require('@actions/core');
          const github = require('@actions/github');

          async function updateTitle() {
            try {
              const { context } = github;
              const pr_number = context.payload.pull_request.number;
              const base_branch = context.payload.pull_request.base.ref;

              if (base_branch.startsWith('dev/')) {
                const branch_code = base_branch.split('/').pop();
                const original_title = context.payload.pull_request.title;
                const new_title = `[${branch_code}] ${original_title}`;

                if (original_title !== new_title) {
                  const url = `https://api.github.com/repos/${context.repo.owner}/${context.repo.repo}/pulls/${pr_number}`;
                  const response = await fetch(url, {
                    method: 'PATCH',
                    headers: {
                      Authorization: `token ${process.env.GITHUB_TOKEN}`,
                      Accept: 'application/vnd.github.v3+json'
                    },
                    body: JSON.stringify({ title: new_title })
                  });

                  if (!response.ok) {
                    throw new Error(`Failed to update PR title: ${response.statusText}`);
                  }

                  console.log(`PR title updated to "${new_title}"`);
                } else {
                  console.log('No update needed');
                }
              } else {
                console.log('Base branch does not start with "dev/", no update needed');
              }
            } catch (error) {
              core.setFailed(`An error occurred: ${error.message}`);
            }
          }

          updateTitle();